// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:loannow/beans/account_delete_bean.dart';
import 'package:loannow/beans/application_bean.dart';
import 'package:loannow/beans/basis_info_bean.dart';
import 'package:loannow/beans/ip_check_bean.dart';
import 'package:loannow/beans/loan_history_bean.dart';
import 'package:loannow/beans/login_info_bean.dart';
import 'package:loannow/beans/system_config_bean.dart';
import 'package:loannow/beans/upload_sign_bean.dart';
import 'package:loannow/beans/user_info_bean.dart';
import 'package:loannow/generated/js_model.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value, {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AccountDeleteBean>[] is M) {
      return data.map<AccountDeleteBean>((Map<String, dynamic> e) => AccountDeleteBean.fromJson(e)).toList() as M;
    }
    if (<ApplicationBean>[] is M) {
      return data.map<ApplicationBean>((Map<String, dynamic> e) => ApplicationBean.fromJson(e)).toList() as M;
    }
    if (<ApplicationLoanBasisInfo>[] is M) {
      return data.map<ApplicationLoanBasisInfo>((Map<String, dynamic> e) => ApplicationLoanBasisInfo.fromJson(e)).toList() as M;
    }
    if (<ApplicationOrderInfo>[] is M) {
      return data.map<ApplicationOrderInfo>((Map<String, dynamic> e) => ApplicationOrderInfo.fromJson(e)).toList() as M;
    }
    if (<ApplicationOrderInfoPaymentInfo>[] is M) {
      return data.map<ApplicationOrderInfoPaymentInfo>((Map<String, dynamic> e) => ApplicationOrderInfoPaymentInfo.fromJson(e)).toList() as M;
    }
    if (<ApplicationOrderInfoRepaymentInfo>[] is M) {
      return data.map<ApplicationOrderInfoRepaymentInfo>((Map<String, dynamic> e) => ApplicationOrderInfoRepaymentInfo.fromJson(e)).toList() as M;
    }
    if (<BasisInfoBean>[] is M) {
      return data.map<BasisInfoBean>((Map<String, dynamic> e) => BasisInfoBean.fromJson(e)).toList() as M;
    }
    if (<BasisInfoContactPersons>[] is M) {
      return data.map<BasisInfoContactPersons>((Map<String, dynamic> e) => BasisInfoContactPersons.fromJson(e)).toList() as M;
    }
    if (<IpCheckBean>[] is M) {
      return data.map<IpCheckBean>((Map<String, dynamic> e) => IpCheckBean.fromJson(e)).toList() as M;
    }
    if (<LoanHistoryBean>[] is M) {
      return data.map<LoanHistoryBean>((Map<String, dynamic> e) => LoanHistoryBean.fromJson(e)).toList() as M;
    }
    if (<LoginInfoBean>[] is M) {
      return data.map<LoginInfoBean>((Map<String, dynamic> e) => LoginInfoBean.fromJson(e)).toList() as M;
    }
    if (<SystemConfigBean>[] is M) {
      return data.map<SystemConfigBean>((Map<String, dynamic> e) => SystemConfigBean.fromJson(e)).toList() as M;
    }
    if (<SystemConfigDictInfo>[] is M) {
      return data.map<SystemConfigDictInfo>((Map<String, dynamic> e) => SystemConfigDictInfo.fromJson(e)).toList() as M;
    }
    if (<SystemConfigDictInfoServicePhones>[] is M) {
      return data.map<SystemConfigDictInfoServicePhones>((Map<String, dynamic> e) => SystemConfigDictInfoServicePhones.fromJson(e)).toList() as M;
    }

    if (<UploadSignBean>[] is M) {
      return data.map<UploadSignBean>((Map<String, dynamic> e) => UploadSignBean.fromJson(e)).toList() as M;
    }
    if (<UserInfoBean>[] is M) {
      return data.map<UserInfoBean>((Map<String, dynamic> e) => UserInfoBean.fromJson(e)).toList() as M;
    }
    if (<UserInfoCreditInfo>[] is M) {
      return data.map<UserInfoCreditInfo>((Map<String, dynamic> e) => UserInfoCreditInfo.fromJson(e)).toList() as M;
    }
    if (<UserInfoCreditInfoCurrentLevel>[] is M) {
      return data.map<UserInfoCreditInfoCurrentLevel>((Map<String, dynamic> e) => UserInfoCreditInfoCurrentLevel.fromJson(e)).toList() as M;
    }
    if (<UserInfoCreditInfoNextLevel>[] is M) {
      return data.map<UserInfoCreditInfoNextLevel>((Map<String, dynamic> e) => UserInfoCreditInfoNextLevel.fromJson(e)).toList() as M;
    }
    if (<JsModel>[] is M) {
      return data.map<JsModel>((Map<String, dynamic> e) => JsModel.fromJson(e)).toList() as M;
    }
    if (<JsModelData>[] is M) {
      return data.map<JsModelData>((Map<String, dynamic> e) => JsModelData.fromJson(e)).toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AccountDeleteBean).toString(): AccountDeleteBean.fromJson,
    (ApplicationBean).toString(): ApplicationBean.fromJson,
    (ApplicationLoanBasisInfo).toString(): ApplicationLoanBasisInfo.fromJson,
    (ApplicationOrderInfo).toString(): ApplicationOrderInfo.fromJson,
    (ApplicationOrderInfoPaymentInfo).toString(): ApplicationOrderInfoPaymentInfo.fromJson,
    (ApplicationOrderInfoRepaymentInfo).toString(): ApplicationOrderInfoRepaymentInfo.fromJson,
    (BasisInfoBean).toString(): BasisInfoBean.fromJson,
    (BasisInfoContactPersons).toString(): BasisInfoContactPersons.fromJson,
    (IpCheckBean).toString(): IpCheckBean.fromJson,
    (LoanHistoryBean).toString(): LoanHistoryBean.fromJson,
    (LoginInfoBean).toString(): LoginInfoBean.fromJson,
    (SystemConfigBean).toString(): SystemConfigBean.fromJson,
    (SystemConfigDictInfo).toString(): SystemConfigDictInfo.fromJson,
    (SystemConfigDictInfoServicePhones).toString(): SystemConfigDictInfoServicePhones.fromJson,
    (UploadSignBean).toString(): UploadSignBean.fromJson,
    (UserInfoBean).toString(): UserInfoBean.fromJson,
    (UserInfoCreditInfo).toString(): UserInfoCreditInfo.fromJson,
    (UserInfoCreditInfoCurrentLevel).toString(): UserInfoCreditInfoCurrentLevel.fromJson,
    (UserInfoCreditInfoNextLevel).toString(): UserInfoCreditInfoNextLevel.fromJson,
    (JsModel).toString(): JsModel.fromJson,
    (JsModelData).toString(): JsModelData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
